{"ast":null,"code":"import _defineProperty from \"/home/avani/final-project-akp18/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/home/avani/final-project-akp18/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/avani/final-project-akp18/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/avani/final-project-akp18/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/avani/final-project-akp18/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/avani/final-project-akp18/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/avani/final-project-akp18/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/avani/final-project-akp18/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/avani/final-project-akp18/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/avani/final-project-akp18/client/src/components/Admin.js\";\nimport React, { Component } from \"react\";\nimport truffleContract from \"truffle-contract\";\n\nvar Admin =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Admin, _React$Component);\n\n  function Admin(props) {\n    var _this;\n\n    _classCallCheck(this, Admin);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Admin).call(this, props));\n    _this.componentDidMount =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              try {\n                _this.runExample();\n\n                _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n                _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n                _this.handleSubmitStrOwner = _this.handleSubmitStrOwner.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n              } catch (error) {\n                // Catch any errors for any of the above operations.\n                alert(\"Failed to load web3, accounts, or contract. Check console for details.\" + error);\n              }\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n    _this.runExample =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var _this$state, accounts, contract, _PendingStores, _Admins, _StoreOwners, _StoreFrontCount, i, _StoreFront;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _this$state = _this.state, accounts = _this$state.accounts, contract = _this$state.contract;\n              _PendingStores = []; // Get the value from the contract to prove it worked.\n\n              _context2.next = 4;\n              return contract.getAdmins.call({\n                from: accounts[0]\n              });\n\n            case 4:\n              _Admins = _context2.sent;\n              _context2.next = 7;\n              return contract.getStoreOwners.call({\n                from: accounts[0]\n              });\n\n            case 7:\n              _StoreOwners = _context2.sent;\n              _context2.next = 10;\n              return contract.getStoreFrontCount.call({\n                from: accounts[0]\n              });\n\n            case 10:\n              _StoreFrontCount = _context2.sent;\n              i = 0;\n\n            case 12:\n              if (!(i < _StoreFrontCount)) {\n                _context2.next = 20;\n                break;\n              }\n\n              _context2.next = 15;\n              return contract.getStoreFrontbyId.call(i, {\n                from: accounts[0]\n              });\n\n            case 15:\n              _StoreFront = _context2.sent;\n              //Create storefront if not approved\n              if (!_StoreFront[3]) _PendingStores.push(\"Store Number: \" + i + \" ,Store Name: \" + _StoreFront[0]);\n\n            case 17:\n              i++;\n              _context2.next = 12;\n              break;\n\n            case 20:\n              // Update state with the result.\n              _this.setState({\n                adminvalue: '',\n                storeownervalue: '',\n                Admins: _Admins,\n                StoreOwners: _StoreOwners,\n                PendingStores: _PendingStores\n              });\n\n            case 21:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n    _this.state = {\n      adminvalue: '',\n      storeownervalue: '',\n      storeapprvalue: '',\n      Admins: [],\n      StoreOwners: [],\n      PendingStores: [],\n      web3: _this.props.web3,\n      accounts: _this.props.accounts,\n      contract: _this.props.contract\n    };\n    return _this;\n  }\n\n  _createClass(Admin, [{\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      this.setState(_defineProperty({}, event.target.name, event.target.value));\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(event) {\n      var _this2 = this;\n\n      event.preventDefault();\n      var _this$state2 = this.state,\n          accounts = _this$state2.accounts,\n          contract = _this$state2.contract;\n      var value = this.state.adminvalue;\n\n      if (!value) {\n        alert(\"Address can't be empty \" + value);\n      } else {\n        alert(\"Adding a new admin \" + value);\n        contract.addAdmin(value, {\n          from: accounts[0]\n        }).then(function (result) {\n          _this2.runExample();\n\n          _this2.forceUpdate();\n        });\n        this.setState({\n          adminvalue: '',\n          storeownervalue: ''\n        });\n      }\n    }\n  }, {\n    key: \"handleSubmitStrOwner\",\n    value: function handleSubmitStrOwner(event) {\n      var _this3 = this;\n\n      event.preventDefault();\n      var _this$state3 = this.state,\n          accounts = _this$state3.accounts,\n          contract = _this$state3.contract;\n      var value = this.state.storeownervalue;\n\n      if (!value) {\n        alert(\"Address can't be empty \" + value);\n      } else {\n        alert(\"Adding a new Store Owner \" + value);\n        contract.addStoreOwner(value, {\n          from: accounts[0]\n        }).then(function (result) {\n          _this3.runExample();\n\n          _this3.forceUpdate();\n        });\n        this.setState({\n          adminvalue: '',\n          storeownervalue: ''\n        });\n      }\n    }\n  }, {\n    key: \"handleApprStore\",\n    value: function handleApprStore(event) {\n      var _this4 = this;\n\n      event.preventDefault();\n      var _this$state4 = this.state,\n          accounts = _this$state4.accounts,\n          contract = _this$state4.contract;\n      var value = this.state.storeapprvalue;\n\n      if (!value) {\n        alert(\"Store number can't be empty \" + value);\n      } else {\n        contract.approveStoreFront(value, {\n          from: accounts[0]\n        }).then(function (result) {\n          _this4.runExample();\n\n          _this4.forceUpdate();\n        });\n        this.setState({\n          storeapprvalue: ''\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      var storeownerlist = this.state.StoreOwners;\n      var adminlist = this.state.Admins;\n      var pendingstorelist = this.state.PendingStores;\n      return React.createElement(\"form\", {\n        onSubmit: this.handleSubmit.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, \"You are logged in as ADMIN\"), function () {\n        if (!_this5.props.MarketState) return React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        }, \"Current Market State: OPEN \");else return React.createElement(\"h6\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159\n          },\n          __self: this\n        }, \"Current Market State: CLOSED  \");\n      }(), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, \"Add a new Admin:\", React.createElement(\"input\", {\n        type: \"text\",\n        ref: \"admininput\",\n        name: \"adminvalue\",\n        value: this.state.adminvalue,\n        onChange: this.handleChange,\n        placeholder: \"Enter Admin Address...\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, \"Add\")), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"result\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, \"List of Admins:\"), adminlist.map(function (adminlist, index) {\n        return React.createElement(\"li\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172\n          },\n          __self: this\n        }, adminlist);\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, \"Add a new Store Owner:\", React.createElement(\"input\", {\n        type: \"text\",\n        ref: \"storeownerinput\",\n        name: \"storeownervalue\",\n        value: this.state.storeownervalue,\n        onChange: this.handleChange,\n        placeholder: \"Enter Store Owner Address...\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        onClick: this.handleSubmitStrOwner.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, \"Add\")), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"result\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, \"List of Store Owners:\"), storeownerlist.map(function (storeownerlist, index) {\n        return React.createElement(\"li\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187\n          },\n          __self: this\n        }, storeownerlist);\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, \"Approve New Store Opening:\", React.createElement(\"input\", {\n        type: \"text\",\n        ref: \"storeapprvalue\",\n        name: \"storeapprvalue\",\n        value: this.state.storeapprvalue,\n        onChange: this.handleChange,\n        placeholder: \"Enter Store Number i.e 23...\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        onClick: this.handleApprStore.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, \"Approve\")), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"result\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, \"List of Pending New Store Fronts:\"), pendingstorelist.map(function (pendingstorelist, index) {\n        return React.createElement(\"li\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203\n          },\n          __self: this\n        }, pendingstorelist);\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Admin;\n}(React.Component);\n\nexport default Admin;","map":{"version":3,"sources":["/home/avani/final-project-akp18/client/src/components/Admin.js"],"names":["React","Component","truffleContract","Admin","props","componentDidMount","runExample","handleChange","bind","handleSubmit","handleSubmitStrOwner","error","alert","state","accounts","contract","_PendingStores","getAdmins","call","from","_Admins","getStoreOwners","_StoreOwners","getStoreFrontCount","_StoreFrontCount","i","getStoreFrontbyId","_StoreFront","push","setState","adminvalue","storeownervalue","Admins","StoreOwners","PendingStores","storeapprvalue","web3","event","target","name","value","preventDefault","addAdmin","then","result","forceUpdate","addStoreOwner","approveStoreFront","storeownerlist","adminlist","pendingstorelist","MarketState","map","index","handleApprStore"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport truffleContract from \"truffle-contract\";\n\n\nclass Admin extends React.Component {\n\nconstructor(props) {\n    super(props);\n    this.state = { adminvalue: '', storeownervalue: '',storeapprvalue: '' , Admins: [],StoreOwners: [],PendingStores: []  ,web3: this.props.web3, accounts: this.props.accounts, contract: this.props.contract };\n    }\n\n\n  componentDidMount = async () => {\n  try {\n\n      this.runExample();\n      \n      this.handleChange = this.handleChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n      this.handleSubmitStrOwner = this.handleSubmitStrOwner.bind(this);\n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.` + error\n      );\n    }\n  };\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n    let _PendingStores = [];\n\n    // Get the value from the contract to prove it worked.\n    const _Admins = await contract.getAdmins.call({ from: accounts[0] });\n\n\n    // Get the value from the contract to prove it worked.\n    const _StoreOwners = await contract.getStoreOwners.call({ from: accounts[0] });\n\n    // Get total storefront count from the contract.\n    const _StoreFrontCount = await contract.getStoreFrontCount.call({ from: accounts[0] });\n\n \n    // Outer loop to create parent\n    for (let i = 0; i < _StoreFrontCount; i++) \n    {\n     \n       // Get the value from the contract to prove it worked.\n      const _StoreFront = await contract.getStoreFrontbyId.call(i, { from: accounts[0] });\n\n         //Create storefront if not approved\n\tif(!_StoreFront[3])\n         _PendingStores.push( \"Store Number: \" + i +  \" ,Store Name: \" +_StoreFront[0] );\n\n   }\n\n    \n    // Update state with the result.\n    this.setState({ adminvalue: '',storeownervalue: '',Admins: _Admins, StoreOwners: _StoreOwners,PendingStores: _PendingStores});\n\n  };\n\n\n  handleChange(event) {\n\n     this.setState({ [event.target.name]: event.target.value });\n  }\n\n  handleSubmit(event) {\n\n  event.preventDefault();\n  const { accounts, contract } = this.state;\t\n  var value = this.state.adminvalue;\n    if(!value)\n  {\n   alert(\n        `Address can't be empty ` + value\n      \t);\n   }\n   else{\n    alert(\n        `Adding a new admin ` + value\n      \t);\n\n        contract.addAdmin(value, {from : accounts[0]})\n        .then(result => {  \t\t\n\t\tthis.runExample();\n        \tthis.forceUpdate(); \n        });\n\tthis.setState({ adminvalue: '',storeownervalue: ''});\n}\n  }\n\n  handleSubmitStrOwner(event) {\n\n  event.preventDefault();\n  const { accounts, contract } = this.state;\t\n  var value = this.state.storeownervalue;\n      if(!value)\n  {\n   alert(\n        `Address can't be empty ` + value\n      \t);\n   }\n   else{\n    alert(\n        `Adding a new Store Owner ` + value\n      \t);\n\n        contract.addStoreOwner(value, {from : accounts[0]})\n        .then(result => {         \n\t\tthis.runExample();\n        \tthis.forceUpdate(); \n        });\n\tthis.setState({ adminvalue: '',storeownervalue: ''});\n}\n  }\n\n  handleApprStore(event) {\n\n  event.preventDefault();\n  const { accounts, contract } = this.state;\t\n  var value = this.state.storeapprvalue;\n      if(!value)\n  {\n   alert(\n        `Store number can't be empty ` + value\n      \t);\n   }\n   else{\n    \n        contract.approveStoreFront(value, {from : accounts[0]})\n        .then(result => {         \n\t\tthis.runExample();\n        \tthis.forceUpdate(); \n        });\n\tthis.setState({ storeapprvalue: ''});\n}\n  }\n\n\n\n  render() {\n\n    var storeownerlist = this.state.StoreOwners;\n    var adminlist = this.state.Admins;\n    var pendingstorelist = this.state.PendingStores;\n\n    return ( \t\n      <form onSubmit={this.handleSubmit.bind(this)}>\n\n       <h3>You are logged in as ADMIN</h3>\n        {\n\t   (() => {\n\t      if(!this.props.MarketState)\n\t         return <h5>Current Market State: OPEN </h5> \n\t       else\n\t\t  return <h6>Current Market State: CLOSED  </h6>\n\t   })()\n\t}\n       <p>\n        <label>\n          Add a new Admin:\n          <input type=\"text\" ref=\"admininput\" name=\"adminvalue\" value={this.state.adminvalue} onChange={this.handleChange} placeholder=\"Enter Admin Address...\"/>\n        </label>\n        <button type=\"submit\">Add</button>\n\t</p>\n\t<ul> \t\n\t\t<div id=\"result\">List of Admins:</div>\n                {adminlist.map(function(adminlist, index){\n                    return <li key={ index }>{adminlist}</li>;\n                  })}\n            </ul>       \n\t <br/>\n\n    \t<p>\n        <label>\n          Add a new Store Owner:\n          <input type=\"text\" ref=\"storeownerinput\" name=\"storeownervalue\" value={this.state.storeownervalue} onChange={this.handleChange} placeholder=\"Enter Store Owner Address...\"/>\n        </label>\n        <button onClick={this.handleSubmitStrOwner.bind(this)}>Add</button>\n\t</p>\n\t   <ul> \t\n\t\t<div id=\"result\">List of Store Owners:</div>\n                {storeownerlist.map(function(storeownerlist, index){\n                    return <li key={ index }>{storeownerlist}</li>;\n                  })}\n            </ul>       \n\t <br/>\n\n\n    \t<p>\n        <label>\n          Approve New Store Opening: \n          <input type=\"text\" ref=\"storeapprvalue\" name=\"storeapprvalue\" value={this.state.storeapprvalue} onChange={this.handleChange} placeholder=\"Enter Store Number i.e 23...\"/>\n        </label>\n        <button onClick={this.handleApprStore.bind(this)}>Approve</button>\n\t</p>\n\t\t<ul> \t\n\t\t<div id=\"result\">List of Pending New Store Fronts:</div>\n                {pendingstorelist.map(function(pendingstorelist, index){\n                    return <li key={ index }>{pendingstorelist}</li>;\n                  })}\n            </ul>        \n\t <br/>\t\n      </form>\t\n    );\n  }\n}\nexport default Admin;\n"]},"metadata":{},"sourceType":"module"}